<?php

namespace App\Controller\Admin;

use App\EasyAdmin\MultiUploadImages\MultipleImageField;
use App\EasyAdmin\MultiUploadImages\MultipleImageHelper;
use App\Entity\PeopleReviews;
use App\Repository\PeopleReviewsRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\BatchActionDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\KernelInterface;


class PeopleReviewsCrudController extends AbstractCrudController
{
    private PeopleReviewsRepository $peopleReviewsRepository;
    private MultipleImageHelper $uploadHelper;

    public static function getEntityFqcn(): string
    {
        return PeopleReviews::class;
    }
    public function __construct(PeopleReviewsRepository $peopleReviewsRepository, MultipleImageHelper $uploadHelper)
    {
        $this->peopleReviewsRepository = $peopleReviewsRepository;
        $this->uploadHelper = $uploadHelper;
    }

    public function createEntity(string $entityFqcn): PeopleReviews
    {
        $product = new PeopleReviews();
        $product->setReviewAlt("Screenshot");

        return $product;
    }
    public function configureFields(string $pageName): iterable
    {
        yield IdField::new('id')
            ->onlyOnIndex();

        yield ImageField::new('ReviewPath')
            ->hideWhenCreating()
            ->setBasePath('uploads/reviews')
            ->setUploadDir('public/uploads/reviews');

        yield MultipleImageField::new('ReviewPathFile')
            ->setFormTypeOption('multiple', true);

        yield TextField::new('ReviewAlt');
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $filesArray = parent::getContext()->getRequest()->files->get('PeopleReviews')['ReviewPathFile'];
        foreach($filesArray as $file)
        {
            $uniqueImageName = $this->uploadHelper->generateUniqueFileName($file->getClientOriginalName());
            $peopleReviews = (new PeopleReviews())
                ->setReviewAlt($entityInstance->getReviewAlt())
                ->setReviewPath($uniqueImageName);

            $entityInstance->upload($file, $uniqueImageName);
            $entityManager->persist($peopleReviews);
        }
        $entityManager->flush();
    }

    public function batchDelete(AdminContext $context, BatchActionDto $batchActionDto): Response
    {

        foreach ($batchActionDto->getEntityIds() as $entityId) {
            $entityToRemove = $this->peopleReviewsRepository->find($entityId);
            $reviewToRemovePath = $entityToRemove->getReviewPath();
            $this->uploadHelper->deleteReviewFromDirectory($reviewToRemovePath, 'reviews');
        }
        return parent::batchDelete($context, $batchActionDto); // TODO: Change the autogenerated stub
    }

    public function delete(AdminContext $context): Response
    {
        $imgPath = $context->getEntity()->getInstance()->getReviewPath();
        $this->uploadHelper->deleteReviewFromDirectory($imgPath, 'reviews');
        return parent::delete($context); // TODO: Change the autogenerated stub
    }

}
